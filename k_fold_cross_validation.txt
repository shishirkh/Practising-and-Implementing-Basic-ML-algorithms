
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('data_file_for_try_1.csv')
X = dataset.iloc[:,1:10].values
y = dataset.iloc[:,[10]].values

from sklearn.preprocessing import Imputer 
imputer = Imputer(missing_values = 'NaN',strategy = 'most_frequent' ,axis = 0 )
imputer = imputer.fit( X[:,0:10])
X[:,0:10] = imputer.transform(X[:,0:10])

from sklearn.cross_validation import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 1/3,random_state = 0)

#though fature scaling is not required here as all the features have the same range
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

#decision tree classification
from sklearn.svm import SVC
classifier = SVC(C = 1,kernel = 'rbf',gamma = 0.11,random_state = 0)
classifier.fit(X_train,y_train)


#trying to apply k fold cross validation
from sklearn.cross_validation import cross_val_score
accuracies = cross_val_score(estimator = classifier , X = X_train , y = y_train.ravel() , cv = 10)
mean_accuracy = accuracies.mean()
std_accuracy = accuracies.std()

#applying GridSearchCV to find the best hyper parameters
from sklearn.grid_search import GridSearchCV
parameters = [ 
              {'C':[1,10,100,1000],'gamma':[0.11,0.12,0.13]}
              ]
grid_search = GridSearchCV(
                           estimator = classifier,
                           param_grid = parameters,
                           scoring = 'accuracy',
                           cv = 10,
                           n_jobs = 1
                           )
grid_search = grid_search.fit(X_train,y_train.flatten())
best_accuracy = grid_search.best_score_
best_parameters = grid_search.best_params_

#making predictions
y_pred = classifier.predict(X_test)

#making the confusion matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_pred)

#finding the accuracy
accuracy =( (cm[0][0] + cm[1][1])/(cm[0][0] + cm[0][1] + cm[1][0] + cm[1][1]) )*100


#making new predictions 
own_try = np.array([[4,5,6,8,2,3,4,5,6]])
own_pred = classifier.predict(own_try)
